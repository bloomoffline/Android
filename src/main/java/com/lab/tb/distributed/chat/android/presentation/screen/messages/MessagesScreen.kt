package com.lab.tb.distributed.chat.android.presentation.screen.messagesimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.combinedClickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.lazy.itemsIndexedimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.BasicTextFieldimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.ChevronRightimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.Dividerimport androidx.compose.material3.DropdownMenuimport androidx.compose.material3.DropdownMenuItemimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.LocalContentColorimport androidx.compose.material3.LocalTextStyleimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.ModalBottomSheetimport androidx.compose.material3.Textimport androidx.compose.material3.rememberModalBottomSheetStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.SolidColorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.ClipboardManagerimport androidx.compose.ui.platform.LocalClipboardManagerimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.AnnotatedStringimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.lab.tb.distributed.ChatControllerimport com.lab.tb.distributed.chat.android.Rimport com.lab.tb.distributed.chat.android.presentation.component.ConnectedUserItemimport com.lab.tb.distributed.chat.android.presentation.component.SectionHeaderimport com.lab.tb.distributed.model.ChatChannelEnumimport com.lab.tb.distributed.model.MessageViewimport org.koin.androidx.compose.koinViewModel@Composablefun MessagesRoute(    modifier: Modifier = Modifier,    viewModel: MessagesViewModel = koinViewModel(),    onMessageClick: (messageView: MessageView) -> Unit) {    val messagesUiState by viewModel.messagesUiState.collectAsStateWithLifecycle()    MessagesScreen(        modifier = modifier.fillMaxSize(),        messagesUiState = messagesUiState,        onMessageClick = onMessageClick,        onPinClick = viewModel::setPinChannel,        onDeleteLocallyClick = viewModel::deleteChannel    )}@Composableprivate fun MessagesScreen(    modifier: Modifier = Modifier,    messagesUiState: MessagesUiState,    onStartRoomClick: () -> Unit = {},    onMessageClick: (messageView: MessageView) -> Unit = {},    onPinClick: (id: String, isPinned: Boolean) -> Unit,    onDeleteLocallyClick: (id: String) -> Unit = {},) {    var showBottomSheet by remember { mutableStateOf(false) }    if (messagesUiState is MessagesUiState.Success) {        LazyColumn(modifier.padding(horizontal = 25.dp)) {            item {                StartRoomSection(onStartRoomClick = {                    showBottomSheet = true                })                Spacer(Modifier.height(20.dp))            }            items(messagesUiState.messageList) { message ->                MessageItem(                    messageView = message,                    onMessageClick = onMessageClick,                    onPinClick = onPinClick,                    onDeleteLocallyClick = onDeleteLocallyClick                )            }        }    }    if (showBottomSheet) {        PublicRoomBottomSheet(onDismissRequest = {            showBottomSheet = false        })    }}@Composableprivate fun StartRoomSection(    modifier: Modifier = Modifier,    onStartRoomClick: () -> Unit = {},) {    Column {        SectionHeader(stringResource(id = R.string.messages))        Card(            shape = RoundedCornerShape(16.dp),            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondary),            modifier = modifier                .fillMaxWidth()                .height(56.dp)                .clickable { onStartRoomClick() }        ) {            Row(                modifier = Modifier                    .padding(5.dp)                    .fillMaxSize(),                verticalAlignment = Alignment.CenterVertically            ) {                Image(                    painter = painterResource(R.drawable.ic_open_chat_room_white),                    modifier = Modifier.padding(end = 2.dp),                    contentDescription = null,                )                Text(                    style = TextStyle(                        textAlign = TextAlign.Center,                        color = MaterialTheme.colorScheme.onPrimary,                        fontWeight = FontWeight.Normal,                        fontSize = 15.sp                    ),                    text = stringResource(id = R.string.start_a_public_room_or_private_message),                )            }        }    }}@OptIn(ExperimentalFoundationApi::class)@Composableprivate fun MessageItem(    modifier: Modifier = Modifier,    messageView: MessageView,    onMessageClick: (messageView: MessageView) -> Unit,    onPinClick: (id: String, isPinned: Boolean) -> Unit,    onDeleteLocallyClick: (id: String) -> Unit = {},) {    var expanded by remember { mutableStateOf(false) }    Row(        modifier = modifier            .fillMaxWidth()            .padding(bottom = 16.dp)            .combinedClickable(                onClick = { onMessageClick(messageView) },                onLongClick = { expanded = true }),        verticalAlignment = Alignment.CenterVertically    ) {        val roomTypeImageResource = when (messageView.chatChannel) {            ChatChannelEnum.ROOM -> {                R.drawable.ic_room_white            }            ChatChannelEnum.DM -> {                R.drawable.ic_user_white            }        }        if (messageView.isNewNotification) {            Image(                painterResource(R.drawable.ic_dot_notification),                contentDescription = "",            )        }        Spacer(modifier = Modifier.width(6.dp))        Image(            painterResource(roomTypeImageResource),            contentDescription = "",        )        Spacer(modifier = Modifier.width(12.dp))        Column(modifier = Modifier.weight(1f)) {            Text(                messageView.name,                style = TextStyle(                    color = MaterialTheme.colorScheme.onSurface,                    fontWeight = FontWeight.Normal,                    fontSize = 16.sp                ),            )            Text(                messageView.bio,                style = TextStyle(                    color = MaterialTheme.colorScheme.onSecondary,                    fontWeight = FontWeight.Normal,                    fontSize = 16.sp                ),            )            Spacer(modifier = Modifier.height(8.dp))            Divider(                color = MaterialTheme.colorScheme.secondary,                modifier = Modifier                    .height(0.8.dp)                    .fillMaxWidth()            )        }        if (messageView.isPinned) {            Image(                painterResource(R.drawable.ic_pin),                contentDescription = "Pin Icon",            )        }        MessageDropdownMenu(            messageView = messageView,            expanded = expanded,            onDismissRequest = { expanded = false },            onPinClick = onPinClick,            onDeleteLocallyClick = onDeleteLocallyClick        )    }}@Composableprivate fun MessageDropdownMenu(    messageView: MessageView,    expanded: Boolean,    onDismissRequest: () -> Unit,    onPinClick: (id: String, isPinned: Boolean) -> Unit,    onDeleteLocallyClick: (id: String) -> Unit = {},) {    val clipboardManager: ClipboardManager = LocalClipboardManager.current    DropdownMenu(        expanded = expanded,        onDismissRequest = onDismissRequest    ) {        if (messageView.message?.id != "global") {            DropdownMenuItem(                text = { Text(stringResource(id = if (messageView.isPinned) R.string.unpin else R.string.pin)) },                trailingIcon = {                    if (!messageView.isPinned) {                        Image(                            modifier = Modifier.size(20.dp),                            painter = painterResource(R.drawable.ic_pin),                            contentScale = ContentScale.Fit,                            contentDescription = "Pin"                        )                    }                },                onClick = {                    val id = messageView.message?.id                    id?.let { nonNullId ->                        onPinClick(nonNullId, !messageView.isPinned)                    }                    onDismissRequest()                }            )        }        DropdownMenuItem(            text = { Text(stringResource(id = R.string.delete_locally)) },            trailingIcon = {                Image(                    modifier = Modifier.size(20.dp),                    painter = painterResource(R.drawable.ic_delete),                    contentScale = ContentScale.Fit,                    contentDescription = "Delete locally"                )            },            onClick = {                val id = messageView.message?.id                id?.let { nonNullId ->                    onDeleteLocallyClick(nonNullId)                }                onDismissRequest()            }        )        DropdownMenuItem(            text = { Text(stringResource(id = R.string.copy_room_bloom_url)) },            trailingIcon = {                Image(                    modifier = Modifier.size(20.dp),                    painter = painterResource(R.drawable.ic_copy),                    contentScale = ContentScale.Fit,                    contentDescription = "Copy Room Bloom URL"                )            },            onClick = {                onDismissRequest()                clipboardManager.setText(AnnotatedString(("bloomoffline:///channel/${messageView.chatChannel}")))            }        )    }}@OptIn(ExperimentalMaterial3Api::class)@Composableprivate fun PublicRoomBottomSheet(onDismissRequest: () -> Unit) {    val sheetState = rememberModalBottomSheetState(true)    var textState by rememberSaveable(stateSaver = TextFieldValue.Saver) {        mutableStateOf(TextFieldValue("Your Room Name"))    }    val chatController = remember { ChatController.getInstance() }    val reachableUser = chatController.connectedUser.collectAsState(initial = emptyMap()).value    ModalBottomSheet(        onDismissRequest = onDismissRequest,        sheetState = sheetState,        dragHandle = {}    ) {        Column(            modifier = Modifier                .fillMaxSize()                .padding(40.dp),            horizontalAlignment = Alignment.CenterHorizontally        ) {            Text(text = "Start a Public Room...")            Spacer(modifier = Modifier.height(40.dp))            Row(                modifier = Modifier.fillMaxWidth(),                verticalAlignment = Alignment.CenterVertically            ) {                Image(                    painterResource(R.drawable.ic_room_white),                    contentDescription = "",                )                BasicTextField(                    value = textState,                    onValueChange = { textState = it },                    modifier = Modifier                        .weight(1f)                        .padding(start = 20.dp),                    maxLines = 1,                    cursorBrush = SolidColor(LocalContentColor.current),                    textStyle = LocalTextStyle.current.copy(color = MaterialTheme.colorScheme.onSurface)                )                Icon(                    modifier = Modifier                        .size(40.dp)                        .clickable {                            chatController.createMessageRoom(ChatChannelEnum.ROOM, textState.text)                            onDismissRequest()                        },                    imageVector = Icons.Rounded.ChevronRight,                    contentDescription = "Reply",                )            }            Spacer(modifier = Modifier.height(40.dp))            Text(text = "...or send a Private Message")            Spacer(modifier = Modifier.height(20.dp))            LazyColumn {                itemsIndexed(reachableUser.toList()) { index, user ->                    ConnectedUserItem(                        user = user.second,                        isTheFirstItem = index == 0,                        isTheLastItem = index == reachableUser.size - 1,                        onUserClick = {                            chatController.createMessageRoom(                                ChatChannelEnum.DM,                                dmUserId = it.user.id                            )                            onDismissRequest()                        }                    )                }            }        }    }}